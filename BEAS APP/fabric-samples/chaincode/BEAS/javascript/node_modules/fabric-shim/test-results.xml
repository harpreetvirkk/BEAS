<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.3990000000000002" tests="430" failures="0" skipped="1">
  <testsuite name="Root Suite" timestamp="2020-07-02T12:39:44" tests="0" failures="0" time="0">
  </testsuite>
  <testsuite name="Chaincode" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Chaincode &apos;spi&apos; interface" timestamp="2020-07-02T12:39:44" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.002">
    <testcase name="Chaincode Chaincode &apos;spi&apos; interface should be able to call the init method" time="0" classname="should be able to call the init method">
    </testcase>
    <testcase name="Chaincode Chaincode &apos;spi&apos; interface should be able to call the invoke method" time="0" classname="should be able to call the invoke method">
    </testcase>
    <testcase name="Chaincode Chaincode &apos;spi&apos; interface should only have the Init and Invoke" time="0.002" classname="should only have the Init and Invoke">
    </testcase>
  </testsuite>
  <testsuite name="Start()" timestamp="2020-07-02T12:39:44" tests="7" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.009000000000000001">
    <testcase name="Chaincode Start() should throw an error if no arguments passed" time="0.001" classname="should throw an error if no arguments passed">
    </testcase>
    <testcase name="Chaincode Start() should throw an error if string argument passed" time="0" classname="should throw an error if string argument passed">
    </testcase>
    <testcase name="Chaincode Start() should throw an error if null argument passed" time="0" classname="should throw an error if null argument passed">
    </testcase>
    <testcase name="Chaincode Start() should throw an error if object missing init passed as argument" time="0" classname="should throw an error if object missing init passed as argument">
    </testcase>
    <testcase name="Chaincode Start() should throw an error if object missing invoke passed as argument" time="0" classname="should throw an error if object missing invoke passed as argument">
    </testcase>
    <testcase name="Chaincode Start() should start when passed init and invoke" time="0.006" classname="should start when passed init and invoke">
    </testcase>
    <testcase name="Chaincode Start() should delete unnecessary arguments passed to the CLI before passing on" time="0.002" classname="should delete unnecessary arguments passed to the CLI before passing on">
    </testcase>
  </testsuite>
  <testsuite name="TLS handling" timestamp="2020-07-02T12:39:44" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.003">
    <testcase name="Chaincode Start() TLS handling should throw an error when CORE_TLS_CLIENT_KEY_PATH env var not set" time="0" classname="should throw an error when CORE_TLS_CLIENT_KEY_PATH env var not set">
    </testcase>
    <testcase name="Chaincode Start() TLS handling should throw an error when CORE_TLS_CLIENT_KEY_PATH env var set but CORE_TLS_CLIENT_CERT_PATH env var not set" time="0" classname="should throw an error when CORE_TLS_CLIENT_KEY_PATH env var set but CORE_TLS_CLIENT_CERT_PATH env var not set">
    </testcase>
    <testcase name="Chaincode Start() TLS handling should call handler.chat() with the correct object and output a message" time="0.002" classname="should call handler.chat() with the correct object and output a message">
    </testcase>
    <testcase name="Chaincode Start() TLS handling should load the opts certificate attributes as JSON strings with the correct properties" time="0.001" classname="should load the opts certificate attributes as JSON strings with the correct properties">
    </testcase>
  </testsuite>
  <testsuite name="parsePeerUrlFcn" timestamp="2020-07-02T12:39:44" tests="9" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.004">
    <testcase name="Chaincode parsePeerUrlFcn should throw an error if peer.address not set" time="0.001" classname="should throw an error if peer.address not set">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should throw an error if peer.address set to url" time="0" classname="should throw an error if peer.address set to url">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpc when URL already has that prefix" time="0" classname="should use grpc when URL already has that prefix">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpcs when URL already has that prefix" time="0.001" classname="should use grpcs when URL already has that prefix">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpc when CORE_PEER_TLS_ENABLED env var is not set" time="0.001" classname="should use grpc when CORE_PEER_TLS_ENABLED env var is not set">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpc when CORE_PEER_TLS_ENABLED env var is set to false" time="0" classname="should use grpc when CORE_PEER_TLS_ENABLED env var is set to false">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpc when CORE_PEER_TLS_ENABLED env var is set to a string FALSE" time="0.001" classname="should use grpc when CORE_PEER_TLS_ENABLED env var is set to a string FALSE">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpcs when CORE_PEER_TLS_ENABLED env var is set to true" time="0" classname="should use grpcs when CORE_PEER_TLS_ENABLED env var is set to true">
    </testcase>
    <testcase name="Chaincode parsePeerUrlFcn should use grpcs when CORE_PEER_TLS_ENABLED env var is set to a string TRUE" time="0" classname="should use grpcs when CORE_PEER_TLS_ENABLED env var is set to a string TRUE">
    </testcase>
  </testsuite>
  <testsuite name="response" timestamp="2020-07-02T12:39:44" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.001">
    <testcase name="Chaincode response should let the code response an error" time="0" classname="should let the code response an error">
    </testcase>
    <testcase name="Chaincode response should handle an empty success" time="0.001" classname="should handle an empty success">
    </testcase>
    <testcase name="Chaincode response should handle a success with message" time="0" classname="should handle a success with message">
    </testcase>
  </testsuite>
  <testsuite name="newLogger()" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0.002">
    <testcase name="Chaincode newLogger() should use shim when calling getLogger and no name passed" time="0.001" classname="should use shim when calling getLogger and no name passed">
    </testcase>
    <testcase name="Chaincode newLogger() should use shim when calling getLogger and name passed" time="0.001" classname="should use shim when calling getLogger and name passed">
    </testcase>
  </testsuite>
  <testsuite name="server()" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/chaincode.js" failures="0" time="0">
    <testcase name="Chaincode server() should create a ChaincodeServer instance" time="0" classname="should create a ChaincodeServer instance">
    </testcase>
  </testsuite>
  <testsuite name="fabric-chaincode-node cli" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cli.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Main test" timestamp="2020-07-02T12:39:44" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cli.js" failures="0" time="0.016">
    <testcase name="fabric-chaincode-node cli Main test should setup yargs correctly" time="0.014" classname="should setup yargs correctly">
    </testcase>
    <testcase name="fabric-chaincode-node cli Main test should handle resolved promise  correctly" time="0.001" classname="should handle resolved promise  correctly">
    </testcase>
    <testcase name="fabric-chaincode-node cli Main test should handle rejected promise  correctly" time="0.001" classname="should handle rejected promise  correctly">
    </testcase>
  </testsuite>
  <testsuite name="Client-Identity" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/client-identity.js" failures="0" time="0.001">
    <testcase name="Client-Identity should throw an error when using a bad cert" time="0.001" classname="should throw an error when using a bad cert">
    </testcase>
  </testsuite>
  <testsuite name="Certificate with values" timestamp="2020-07-02T12:39:44" tests="9" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/client-identity.js" failures="0" time="0">
    <testcase name="Client-Identity Certificate with values should have correct mspId" time="0" classname="should have correct mspId">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return correct ID bytes" time="0" classname="should return correct ID bytes">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return correct value on getID()" time="0" classname="should return correct value on getID()">
    </testcase>
    <testcase name="Client-Identity Certificate with values should have correct attrs" time="0" classname="should have correct attrs">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return the value when getAttributeValue() called with known attribute" time="0" classname="should return the value when getAttributeValue() called with known attribute">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return null when getAttributeValue() called with unknown attribute" time="0" classname="should return null when getAttributeValue() called with unknown attribute">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return true when value provided matches known attribute in assertAttributeValue()" time="0" classname="should return true when value provided matches known attribute in assertAttributeValue()">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return false when value provided does not match known attribute in assertAttributeValue()" time="0" classname="should return false when value provided does not match known attribute in assertAttributeValue()">
    </testcase>
    <testcase name="Client-Identity Certificate with values should return false when unknown attribute in assertAttributeValue()" time="0" classname="should return false when unknown attribute in assertAttributeValue()">
    </testcase>
  </testsuite>
  <testsuite name="Certificate with multiple attributes" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/client-identity.js" failures="0" time="0">
    <testcase name="Client-Identity Certificate with multiple attributes should have correct attributes" time="0" classname="should have correct attributes">
    </testcase>
  </testsuite>
  <testsuite name="Certificate without values" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/client-identity.js" failures="0" time="0">
    <testcase name="Client-Identity Certificate without values should have correct mspId" time="0" classname="should have correct mspId">
    </testcase>
    <testcase name="Client-Identity Certificate without values should have not attributes" time="0" classname="should have not attributes">
    </testcase>
  </testsuite>
  <testsuite name="Certificate with long DNs" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/client-identity.js" failures="0" time="0">
    <testcase name="Client-Identity Certificate with long DNs should return correct value on getID()" time="0" classname="should return correct value on getID()">
    </testcase>
  </testsuite>
  <testsuite name="chaincode cmd" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/chaincode.js" failures="0" time="0">
    <testcase name="chaincode cmd should configure the builder function" time="0" classname="should configure the builder function">
    </testcase>
    <testcase name="chaincode cmd should handle correctly" time="0" classname="should handle correctly">
    </testcase>
  </testsuite>
  <testsuite name="#getArgs" timestamp="2020-07-02T12:39:44" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/chaincode.js" failures="0" time="0.001">
    <testcase name="chaincode cmd #getArgs should return yargs when called via cli name" time="0" classname="should return yargs when called via cli name">
    </testcase>
    <testcase name="chaincode cmd #getArgs should use yargs parser on process.argv when not called with cli name" time="0.001" classname="should use yargs parser on process.argv when not called with cli name">
    </testcase>
    <testcase name="chaincode cmd #getArgs should throw an error if a required field is missing" time="0" classname="should throw an error if a required field is missing">
    </testcase>
  </testsuite>
  <testsuite name="fabric-chaincode-node metadata cmd launcher" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata.js" failures="0" time="0">
  </testsuite>
  <testsuite name="cmd method tests" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata.js" failures="0" time="0">
    <testcase name="fabric-chaincode-node metadata cmd launcher cmd method tests should have the correct command and description" time="0" classname="should have the correct command and description">
    </testcase>
    <testcase name="fabric-chaincode-node metadata cmd launcher cmd method tests should call yargs correctly" time="0" classname="should call yargs correctly">
    </testcase>
  </testsuite>
  <testsuite name="GenerateCommand" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata/generateCommand.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#builder function" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata/generateCommand.js" failures="0" time="0">
    <testcase name="GenerateCommand #builder function should have the correct command and description" time="0" classname="should have the correct command and description">
    </testcase>
    <testcase name="GenerateCommand #builder function should call yargs correctly" time="0" classname="should call yargs correctly">
    </testcase>
  </testsuite>
  <testsuite name="#handler function" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata/generateCommand.js" failures="0" time="0">
    <testcase name="GenerateCommand #handler function should call the handler function correctly" time="0" classname="should call the handler function correctly">
    </testcase>
  </testsuite>
  <testsuite name="generate" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata/lib/generate.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#handler" timestamp="2020-07-02T12:39:44" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/metadata/lib/generate.js" failures="0" time="0.002">
    <testcase name="generate #handler should write the contract metadata to a json file when no file extension is specified" time="0.001" classname="should write the contract metadata to a json file when no file extension is specified">
    </testcase>
    <testcase name="generate #handler should write the contract metadata to a json file when the .json file extension is specified" time="0" classname="should write the contract metadata to a json file when the .json file extension is specified">
    </testcase>
    <testcase name="generate #handler should write the contract metadata to the specified file extension when a non .json extension is specified" time="0.001" classname="should write the contract metadata to the specified file extension when a non .json extension is specified">
    </testcase>
    <testcase name="generate #handler should log out the contract metadata to when no file-name arg is passed " time="0" classname="should log out the contract metadata to when no file-name arg is passed ">
    </testcase>
  </testsuite>
  <testsuite name="server cmd" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/serverCommand.js" failures="0" time="0">
  </testsuite>
  <testsuite name=".builder" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/serverCommand.js" failures="0" time="0.001">
    <testcase name="server cmd .builder should configure the builder function" time="0.001" classname="should configure the builder function">
    </testcase>
  </testsuite>
  <testsuite name=".handle" timestamp="2020-07-02T12:39:44" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/serverCommand.js" failures="0" time="0">
    <testcase name="server cmd .handle should handle properly and call bootstrap" time="0" classname="should handle properly and call bootstrap">
    </testcase>
  </testsuite>
  <testsuite name=".getArgs" timestamp="2020-07-02T12:39:44" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/serverCommand.js" failures="0" time="0.003">
    <testcase name="server cmd .getArgs should return the arguments properly" time="0.001" classname="should return the arguments properly">
    </testcase>
    <testcase name="server cmd .getArgs should return the TLS arguments properly" time="0.001" classname="should return the TLS arguments properly">
    </testcase>
    <testcase name="server cmd .getArgs should return the mutual TLS arguments properly" time="0.001" classname="should return the mutual TLS arguments properly">
    </testcase>
    <testcase name="server cmd .getArgs should return the TLS arguments with PEM files properly" time="0" classname="should return the TLS arguments with PEM files properly">
    </testcase>
  </testsuite>
  <testsuite name="parse arguments" timestamp="2020-07-02T12:39:44" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/cmds/serverCommand.js" failures="0" time="0.031">
    <testcase name="server cmd parse arguments should parse the arguments successfully" time="0.003" classname="should parse the arguments successfully">
    </testcase>
    <testcase name="server cmd parse arguments should parse the arguments successfully with TLS options" time="0.002" classname="should parse the arguments successfully with TLS options">
    </testcase>
    <testcase name="server cmd parse arguments should throw when conflicting arguments are passed" time="0.023" classname="should throw when conflicting arguments are passed">
    </testcase>
    <testcase name="server cmd parse arguments should throw when only TLS key is passed" time="0.002" classname="should throw when only TLS key is passed">
    </testcase>
    <testcase name="server cmd parse arguments should throw when only TLS cert is passed" time="0.001" classname="should throw when only TLS cert is passed">
    </testcase>
  </testsuite>
  <testsuite name="bootstrap.js" timestamp="2020-07-02T12:39:44" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#register" timestamp="2020-07-02T12:39:44" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0.002">
    <testcase name="bootstrap.js #register should pass on the register to the shim" time="0.001" classname="should pass on the register to the shim">
    </testcase>
    <testcase name="bootstrap.js #register should pass on the register to the shim in the server mode" time="0.001" classname="should pass on the register to the shim in the server mode">
    </testcase>
  </testsuite>
  <testsuite name="#bootstrap" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0.002">
    <testcase name="bootstrap.js #bootstrap should correctly call the register method" time="0.001" classname="should correctly call the register method">
    </testcase>
    <testcase name="bootstrap.js #bootstrap should correctly call the register method in the server mode" time="0.001" classname="should correctly call the register method in the server mode">
    </testcase>
  </testsuite>
  <testsuite name="#getInfoFromContract" timestamp="2020-07-02T12:39:45" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0.004">
    <testcase name="bootstrap.js #getInfoFromContract should use the main class defined in the package.json" time="0.003" classname="should use the main class defined in the package.json">
    </testcase>
    <testcase name="bootstrap.js #getInfoFromContract should use the main class defined in the package.json with a single element" time="0" classname="should use the main class defined in the package.json with a single element">
    </testcase>
    <testcase name="bootstrap.js #getInfoFromContract should throw an error if there is no json.main" time="0" classname="should throw an error if there is no json.main">
    </testcase>
    <testcase name="bootstrap.js #getInfoFromContract should use the main class defined with contracts exported, and custom serialization" time="0" classname="should use the main class defined with contracts exported, and custom serialization">
    </testcase>
    <testcase name="bootstrap.js #getInfoFromContract should throw an error if there is no transaction property" time="0.001" classname="should throw an error if there is no transaction property">
    </testcase>
  </testsuite>
  <testsuite name="#getMetadata" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0.009000000000000001">
    <testcase name="bootstrap.js #getMetadata should handle when there are files available" time="0.001" classname="should handle when there are files available">
    </testcase>
    <testcase name="bootstrap.js #getMetadata should handle when files not available" time="0.008" classname="should handle when files not available">
    </testcase>
  </testsuite>
  <testsuite name="#loadAndValidateMetadata" timestamp="2020-07-02T12:39:45" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/bootstrap.js" failures="0" time="0.043000000000000003">
    <testcase name="bootstrap.js #loadAndValidateMetadata validate and return the metadata" time="0.032" classname="validate and return the metadata">
    </testcase>
    <testcase name="bootstrap.js #loadAndValidateMetadata fail to validate and throw an error" time="0.001" classname="fail to validate and throw an error">
    </testcase>
    <testcase name="bootstrap.js #loadAndValidateMetadata Should correct validate a schema" time="0.01" classname="Should correct validate a schema">
    </testcase>
  </testsuite>
  <testsuite name="chaincodefromcontract" timestamp="2020-07-02T12:39:45" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2020-07-02T12:39:45" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.003">
    <testcase name="chaincodefromcontract #constructor should handle no classes being passed in" time="0.001" classname="should handle no classes being passed in">
    </testcase>
    <testcase name="chaincodefromcontract #constructor should handle missing serialization information" time="0" classname="should handle missing serialization information">
    </testcase>
    <testcase name="chaincodefromcontract #constructor should handle a single class being passed as a contract" time="0.001" classname="should handle a single class being passed as a contract">
    </testcase>
    <testcase name="chaincodefromcontract #constructor should handle a case where the metadata is incompatible with code" time="0.001" classname="should handle a case where the metadata is incompatible with code">
    </testcase>
  </testsuite>
  <testsuite name="#_compileSchemas" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.003">
    <testcase name="chaincodefromcontract #_compileSchemas should handle no complex objects being available" time="0.001" classname="should handle no complex objects being available">
    </testcase>
    <testcase name="chaincodefromcontract #_compileSchemas should handle complex objects being available" time="0.002" classname="should handle complex objects being available">
    </testcase>
  </testsuite>
  <testsuite name="#_resolveContractImplementations" timestamp="2020-07-02T12:39:45" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.006">
    <testcase name="chaincodefromcontract #_resolveContractImplementations should handle a single class being passed as a contract" time="0.002" classname="should handle a single class being passed as a contract">
    </testcase>
    <testcase name="chaincodefromcontract #_resolveContractImplementations should handle a single class being passed that is not valid" time="0.001" classname="should handle a single class being passed that is not valid">
    </testcase>
    <testcase name="chaincodefromcontract #_resolveContractImplementations should handle a two classes being passed as a contract" time="0.001" classname="should handle a two classes being passed as a contract">
    </testcase>
    <testcase name="chaincodefromcontract #_resolveContractImplementations should handle the default tag being used" time="0.002" classname="should handle the default tag being used">
    </testcase>
  </testsuite>
  <testsuite name="#init" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.016">
    <testcase name="chaincodefromcontract #init should handle no args" time="0.014" classname="should handle no args">
    </testcase>
    <testcase name="chaincodefromcontract #init should handle a single class being passed as a contract" time="0.001" classname="should handle a single class being passed as a contract">
    </testcase>
    <testcase name="chaincodefromcontract #init should handle a single class being passed as a contract" time="0.001" classname="should handle a single class being passed as a contract">
    </testcase>
  </testsuite>
  <testsuite name="#invoke" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.016">
    <testcase name="chaincodefromcontract #invoke should handle no args" time="0.003" classname="should handle no args">
    </testcase>
    <testcase name="chaincodefromcontract #invoke should handle a single class being passed as a contract" time="0.001" classname="should handle a single class being passed as a contract">
    </testcase>
    <testcase name="chaincodefromcontract #invoke should pass the logging object to contracts" time="0.012" classname="should pass the logging object to contracts">
    </testcase>
  </testsuite>
  <testsuite name="#_splitFunctionName" timestamp="2020-07-02T12:39:45" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0">
    <testcase name="chaincodefromcontract #_splitFunctionName should handle the usual case of ns:fn" time="0" classname="should handle the usual case of ns:fn">
    </testcase>
    <testcase name="chaincodefromcontract #_splitFunctionName should handle the case of no contractName explicit" time="0" classname="should handle the case of no contractName explicit">
    </testcase>
    <testcase name="chaincodefromcontract #_splitFunctionName should handle the case of no contractName implict" time="0" classname="should handle the case of no contractName implict">
    </testcase>
    <testcase name="chaincodefromcontract #_splitFunctionName should handle the case of no input" time="0" classname="should handle the case of no input">
    </testcase>
    <testcase name="chaincodefromcontract #_splitFunctionName should handle the case of multiple :" time="0" classname="should handle the case of multiple :">
    </testcase>
  </testsuite>
  <testsuite name="#invokeFunctionality" timestamp="2020-07-02T12:39:45" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.02">
    <testcase name="chaincodefromcontract #invokeFunctionality should handle missing function" time="0.002" classname="should handle missing function">
    </testcase>
    <testcase name="chaincodefromcontract #invokeFunctionality should handle valid contract name, but missing function" time="0.004" classname="should handle valid contract name, but missing function">
    </testcase>
    <testcase name="chaincodefromcontract #invokeFunctionality should handle valid contract name, but missing function and throws error" time="0.005" classname="should handle valid contract name, but missing function and throws error">
    </testcase>
    <testcase name="chaincodefromcontract #invokeFunctionality should handle valid contract name, with valid function" time="0.005" classname="should handle valid contract name, with valid function">
    </testcase>
    <testcase name="chaincodefromcontract #invokeFunctionality should handle functions with returned values schema" time="0.004" classname="should handle functions with returned values schema">
    </testcase>
  </testsuite>
  <testsuite name="#_checkAgainstSuppliedMetadata" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.001">
    <testcase name="chaincodefromcontract #_checkAgainstSuppliedMetadata should return empty array when no issue" time="0.001" classname="should return empty array when no issue">
    </testcase>
    <testcase name="chaincodefromcontract #_checkAgainstSuppliedMetadata should return empty array when metadata has no field contracts" time="0" classname="should return empty array when metadata has no field contracts">
    </testcase>
    <testcase name="chaincodefromcontract #_checkAgainstSuppliedMetadata should return empty array when missing a contract" time="0" classname="should return empty array when missing a contract">
    </testcase>
  </testsuite>
  <testsuite name="#_processContractInfo" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.002">
    <testcase name="chaincodefromcontract #_processContractInfo should be able to handle no annotations suppled" time="0.001" classname="should be able to handle no annotations suppled">
    </testcase>
    <testcase name="chaincodefromcontract #_processContractInfo should be able to handle no annotations suppled" time="0.001" classname="should be able to handle no annotations suppled">
    </testcase>
  </testsuite>
  <testsuite name="#_processContractTransactions" timestamp="2020-07-02T12:39:45" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.002">
    <testcase name="chaincodefromcontract #_processContractTransactions should handle no transaction annotations used, ignoring functions that match in name to ignore array" time="0" classname="should handle no transaction annotations used, ignoring functions that match in name to ignore array">
    </testcase>
    <testcase name="chaincodefromcontract #_processContractTransactions should handle no transaction annotations used, ignoring functions that start with _" time="0.001" classname="should handle no transaction annotations used, ignoring functions that start with _">
    </testcase>
    <testcase name="chaincodefromcontract #_processContractTransactions should not add submitTx to the system contract functions" time="0.001" classname="should not add submitTx to the system contract functions">
    </testcase>
    <testcase name="chaincodefromcontract #_processContractTransactions should handle transaction annotations being used" time="0" classname="should handle transaction annotations being used">
    </testcase>
    <testcase name="chaincodefromcontract #_processContractTransactions should handle transactions with no arguments" time="0" classname="should handle transactions with no arguments">
    </testcase>
  </testsuite>
  <testsuite name="#_augmentMetadataFromCode" timestamp="2020-07-02T12:39:45" tests="8" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0.005">
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should not add extra detail for metadata, info and components when metadata supplied with those fields" time="0" classname="should not add extra detail for metadata, info and components when metadata supplied with those fields">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should use passed info" time="0.001" classname="should use passed info">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should handle contracts and remove underscore lead properties of contractInstance" time="0.001" classname="should handle contracts and remove underscore lead properties of contractInstance">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should correctly retrieve info with the constructor title and version data" time="0" classname="should correctly retrieve info with the constructor title and version data">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should fill in info when there is no constructor title and version data" time="0.001" classname="should fill in info when there is no constructor title and version data">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should fill in components field when not set" time="0.001" classname="should fill in components field when not set">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should fill in components field when not set and reflect fails" time="0.001" classname="should fill in components field when not set and reflect fails">
    </testcase>
    <testcase name="chaincodefromcontract #_augmentMetadataFromCode should fill in schema when not set" time="0" classname="should fill in schema when not set">
    </testcase>
  </testsuite>
  <testsuite name="#helper constructors" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/chaincodefromcontract.js" failures="0" time="0">
    <testcase name="chaincodefromcontract #helper constructors should create the DataMarshall" time="0" classname="should create the DataMarshall">
    </testcase>
  </testsuite>
  <testsuite name="datamarshall.js" timestamp="2020-07-02T12:39:45" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/datamarshall.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/datamarshall.js" failures="0" time="0.002">
    <testcase name="datamarshall.js #constructor should create plain object ok" time="0.001" classname="should create plain object ok">
    </testcase>
    <testcase name="datamarshall.js #constructor should create plain object ok" time="0.001" classname="should create plain object ok">
    </testcase>
  </testsuite>
  <testsuite name="#toWireBuffer" timestamp="2020-07-02T12:39:45" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/datamarshall.js" failures="0" time="0.002">
    <testcase name="datamarshall.js #toWireBuffer should jsonSerialized buffering" time="0.001" classname="should jsonSerialized buffering">
    </testcase>
    <testcase name="datamarshall.js #toWireBuffer should handle no schema passed" time="0.001" classname="should handle no schema passed">
    </testcase>
  </testsuite>
  <testsuite name="#fromWireBuffer" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/datamarshall.js" failures="0" time="0.003">
    <testcase name="datamarshall.js #fromWireBuffer should return the same data as the serializer from buffer" time="0.001" classname="should return the same data as the serializer from buffer">
    </testcase>
    <testcase name="datamarshall.js #fromWireBuffer should handle no validationData" time="0.001" classname="should handle no validationData">
    </testcase>
    <testcase name="datamarshall.js #fromWireBuffer should handle no schema" time="0.001" classname="should handle no schema">
    </testcase>
  </testsuite>
  <testsuite name="#handleParameters" timestamp="2020-07-02T12:39:45" tests="7" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/datamarshall.js" failures="0" time="0.006">
    <testcase name="datamarshall.js #handleParameters should handle function with no parameters and none passed" time="0.001" classname="should handle function with no parameters and none passed">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should handle function with no parameters but some passed" time="0" classname="should handle function with no parameters but some passed">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should handle different length lists" time="0" classname="should handle different length lists">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should handle error when schema has not useful fields" time="0.001" classname="should handle error when schema has not useful fields">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should handle error when type invalid" time="0.001" classname="should handle error when type invalid">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should handle when type invalid for $ref" time="0.001" classname="should handle when type invalid for $ref">
    </testcase>
    <testcase name="datamarshall.js #handleParameters should push valid values to returned array for primitve types" time="0.002" classname="should push valid values to returned array for primitve types">
    </testcase>
  </testsuite>
  <testsuite name="SystemContract" timestamp="2020-07-02T12:39:45" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/systemcontract.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/systemcontract.js" failures="0" time="0.001">
    <testcase name="SystemContract #constructor should create correctly" time="0.001" classname="should create correctly">
    </testcase>
  </testsuite>
  <testsuite name="#GetMetadata" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/contract-spi/systemcontract.js" failures="0" time="0.001">
    <testcase name="SystemContract #GetMetadata should get the buffer" time="0.001" classname="should get the buffer">
    </testcase>
  </testsuite>
  <testsuite name="Handler" timestamp="2020-07-02T12:39:45" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
  </testsuite>
  <testsuite name="QMsg" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler QMsg should set its variables with values passed in the constructor" time="0" classname="should set its variables with values passed in the constructor">
    </testcase>
  </testsuite>
  <testsuite name="getMsg" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler QMsg getMsg should return the value of msg" time="0.001" classname="should return the value of msg">
    </testcase>
  </testsuite>
  <testsuite name="getMsgTxContextId" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler QMsg getMsgTxContextId should return the value of msg.channel_id concatenated with msg.txid" time="0" classname="should return the value of msg.channel_id concatenated with msg.txid">
    </testcase>
  </testsuite>
  <testsuite name="getMethod" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler QMsg getMethod should return the value of method" time="0" classname="should return the value of method">
    </testcase>
  </testsuite>
  <testsuite name="success" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler QMsg success should call the resolve function" time="0.001" classname="should call the resolve function">
    </testcase>
  </testsuite>
  <testsuite name="fail" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler QMsg fail should call the reject function" time="0.001" classname="should call the reject function">
    </testcase>
  </testsuite>
  <testsuite name="MsgQueueHandler" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler MsgQueueHandler should setup its variables on construction" time="0" classname="should setup its variables on construction">
    </testcase>
  </testsuite>
  <testsuite name="queueMsg" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler MsgQueueHandler queueMsg should add message to the queue and call sendMsg and handle when txContentId not in txQueues" time="0" classname="should add message to the queue and call sendMsg and handle when txContentId not in txQueues">
    </testcase>
    <testcase name="Handler MsgQueueHandler queueMsg should add message to the queue and not call call sendMsg when txContentId in txQueues and is empty array" time="0" classname="should add message to the queue and not call call sendMsg when txContentId in txQueues and is empty array">
    </testcase>
    <testcase name="Handler MsgQueueHandler queueMsg should add message to the queue and not call call sendMsg when txContentId in txQueues and already has value in array" time="0" classname="should add message to the queue and not call call sendMsg when txContentId in txQueues and already has value in array">
    </testcase>
  </testsuite>
  <testsuite name="handleMsgResponse" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.003">
    <testcase name="Handler MsgQueueHandler handleMsgResponse should do nothing if qMsg does not exist for txContextId" time="0.001" classname="should do nothing if qMsg does not exist for txContextId">
    </testcase>
    <testcase name="Handler MsgQueueHandler handleMsgResponse should call qMsg success when parseResponse does not throw an error _removeCurrentAndSendNextMsg" time="0.001" classname="should call qMsg success when parseResponse does not throw an error _removeCurrentAndSendNextMsg">
    </testcase>
    <testcase name="Handler MsgQueueHandler handleMsgResponse should call qMsg fail when parseResponse does throw an error _removeCurrentAndSendNextMsg" time="0.001" classname="should call qMsg fail when parseResponse does throw an error _removeCurrentAndSendNextMsg">
    </testcase>
  </testsuite>
  <testsuite name="_getCurrentMsg" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler MsgQueueHandler _getCurrentMsg should get the message at the top of the queue for a txContextId" time="0" classname="should get the message at the top of the queue for a txContextId">
    </testcase>
    <testcase name="Handler MsgQueueHandler _getCurrentMsg should return undefined when queue is empty for a txContextId" time="0" classname="should return undefined when queue is empty for a txContextId">
    </testcase>
    <testcase name="Handler MsgQueueHandler _getCurrentMsg should return undefined when queue does not exist for a txContextId" time="0" classname="should return undefined when queue does not exist for a txContextId">
    </testcase>
  </testsuite>
  <testsuite name="_removeCurrentAndSendNextMsg" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler MsgQueueHandler _removeCurrentAndSendNextMsg should delete the current message and send the next for a txContentId" time="0" classname="should delete the current message and send the next for a txContentId">
    </testcase>
    <testcase name="Handler MsgQueueHandler _removeCurrentAndSendNextMsg should delete the queue if no messages left after current is deleted for a txContentId" time="0" classname="should delete the queue if no messages left after current is deleted for a txContentId">
    </testcase>
    <testcase name="Handler MsgQueueHandler _removeCurrentAndSendNextMsg should do nothing if no queue is found for a txContentId" time="0" classname="should do nothing if no queue is found for a txContentId">
    </testcase>
  </testsuite>
  <testsuite name="_sendMsg" timestamp="2020-07-02T12:39:45" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.003">
    <testcase name="Handler MsgQueueHandler _sendMsg should do nothing if no QMsg found for a txContextId" time="0.001" classname="should do nothing if no QMsg found for a txContextId">
    </testcase>
    <testcase name="Handler MsgQueueHandler _sendMsg should write to the stream the current message" time="0.001" classname="should write to the stream the current message">
    </testcase>
    <testcase name="Handler MsgQueueHandler _sendMsg should call fail on the QMsg if stream write errors" time="0.001" classname="should call fail on the QMsg if stream write errors">
    </testcase>
  </testsuite>
  <testsuite name="ChaincodeSupportClient" timestamp="2020-07-02T12:39:45" tests="14" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.01">
    <testcase name="Handler ChaincodeSupportClient should throw an error when chaincode not passed" time="0" classname="should throw an error when chaincode not passed">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if argument does not match chaincode format" time="0" classname="should throw an error if argument does not match chaincode format">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if argument only part matches chaincode format" time="0" classname="should throw an error if argument only part matches chaincode format">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if argument missing URL argument" time="0.002" classname="should throw an error if argument missing URL argument">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if URL argument does not use grpc as protocol" time="0.001" classname="should throw an error if URL argument does not use grpc as protocol">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should set endpoint, client and default timeout" time="0" classname="should set endpoint, client and default timeout">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should override the default request timeout if value passed" time="0" classname="should override the default request timeout if value passed">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should store additional grpc options" time="0" classname="should store additional grpc options">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should preserve casing in handler addr" time="0" classname="should preserve casing in handler addr">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if connection secure and certificate not passed" time="0" classname="should throw an error if connection secure and certificate not passed">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if connection secure encoded private key not passed as opt" time="0.001" classname="should throw an error if connection secure encoded private key not passed as opt">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should throw an error if connection secure encoded private key not passed as opt" time="0" classname="should throw an error if connection secure encoded private key not passed as opt">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should set endpoint, client and default timeout for a secure connection" time="0.004" classname="should set endpoint, client and default timeout for a secure connection">
    </testcase>
    <testcase name="Handler ChaincodeSupportClient should set grpc ssl options when ssl-target-name-override passed" time="0.002" classname="should set grpc ssl options when ssl-target-name-override passed">
    </testcase>
  </testsuite>
  <testsuite name="close" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler ChaincodeSupportClient close should call end on the stream" time="0" classname="should call end on the stream">
    </testcase>
  </testsuite>
  <testsuite name="chat" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.005">
    <testcase name="Handler ChaincodeSupportClient chat should create an instance of ChaincodeMessageHandler and pass the argument" time="0.005" classname="should create an instance of ChaincodeMessageHandler and pass the argument">
    </testcase>
  </testsuite>
  <testsuite name="toString" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeSupportClient toString should return ChaincodeSupportClient object as a string with the URL" time="0.001" classname="should return ChaincodeSupportClient object as a string with the URL">
    </testcase>
  </testsuite>
  <testsuite name="ChaincodeMessageHandler" timestamp="2020-07-02T12:39:45" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
  </testsuite>
  <testsuite name="chat" timestamp="2020-07-02T12:39:45" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.003">
    <testcase name="Handler ChaincodeMessageHandler chat should create instance of MsgQueueHandler, register the client, setup listeners and write" time="0.003" classname="should create instance of MsgQueueHandler, register the client, setup listeners and write">
    </testcase>
  </testsuite>
  <testsuite name="stream.on.data" timestamp="2020-07-02T12:39:45" tests="9" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.007">
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should throw error when in state created and MSG_TYPE not REGISTERED" time="0.001" classname="should throw error when in state created and MSG_TYPE not REGISTERED">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should throw error when in state established and MSG_TYPE not READY" time="0" classname="should throw error when in state established and MSG_TYPE not READY">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should do nothing when in state ready and MSG_TYPE equals REGISTERED" time="0" classname="should do nothing when in state ready and MSG_TYPE equals REGISTERED">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should do nothing when in state ready and MSG_TYPE equals READY" time="0" classname="should do nothing when in state ready and MSG_TYPE equals READY">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should call handleMsgResponse when in state ready and MSG_TYPE equals RESPONSE" time="0.002" classname="should call handleMsgResponse when in state ready and MSG_TYPE equals RESPONSE">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should call handleMsgResponse when in state ready and MSG_TYPE equals ERROR" time="0.001" classname="should call handleMsgResponse when in state ready and MSG_TYPE equals ERROR">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should call handleInit when in state ready and MSG_TYPE equals INIT" time="0.001" classname="should call handleInit when in state ready and MSG_TYPE equals INIT">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should call handleTransaction when in state ready and MSG_TYPE equals TRANSACTION" time="0.001" classname="should call handleTransaction when in state ready and MSG_TYPE equals TRANSACTION">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.data should end the process with value 1" time="0.001" classname="should end the process with value 1">
    </testcase>
  </testsuite>
  <testsuite name="stream.on.end" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.end should cancel the stream" time="0.001" classname="should cancel the stream">
    </testcase>
  </testsuite>
  <testsuite name="stream.on.error" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.error should end the stream" time="0" classname="should end the stream">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler chat stream.on.error should end the  with error" time="0.001" classname="should end the  with error">
    </testcase>
  </testsuite>
  <testsuite name="handleInit" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleInit should call handleMessage" time="0.001" classname="should call handleMessage">
    </testcase>
  </testsuite>
  <testsuite name="handleTransaction" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleTransaction should call handleMessage" time="0.001" classname="should call handleMessage">
    </testcase>
  </testsuite>
  <testsuite name="handleGetState" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handleGetState should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetState should reject when _askPeerAndListen resolves" time="0.001" classname="should reject when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handlePutState" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handlePutState should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handlePutState should reject when _askPeerAndListen resolves" time="0.001" classname="should reject when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleDeleteState" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleDeleteState should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleDeleteState should reject when _askPeerAndListen rejects" time="0" classname="should reject when _askPeerAndListen rejects">
    </testcase>
  </testsuite>
  <testsuite name="handlePutStateMetadata" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handlePutStateMetadata should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handlePutStateMetadata should reject when _askPeerAndListen rejects" time="0.001" classname="should reject when _askPeerAndListen rejects">
    </testcase>
  </testsuite>
  <testsuite name="handleGetPrivateDataHash" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handleGetPrivateDataHash should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetPrivateDataHash should reject when _askPeerAndListen rejects" time="0.001" classname="should reject when _askPeerAndListen rejects">
    </testcase>
  </testsuite>
  <testsuite name="handleGetStateMetadata" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handleGetStateMetadata should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetStateMetadata should reject when _askPeerAndListen rejects" time="0.001" classname="should reject when _askPeerAndListen rejects">
    </testcase>
  </testsuite>
  <testsuite name="handleGetStateByRange" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler handleGetStateByRange should resolve when _askPeerAndListen resolves" time="0" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetStateByRange should reject when _askPeerAndListen resolves" time="0.001" classname="should reject when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetStateByRange should resolve with metadata when _askPeerAndListen resolves" time="0.001" classname="should resolve with metadata when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleQueryStateNext" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleQueryStateNext should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleQueryStateNext should reject when _askPeerAndListen resolves" time="0" classname="should reject when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleQueryStateClose" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleQueryStateClose should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleQueryStateClose should reject when _askPeerAndListen resolves" time="0" classname="should reject when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleGetQueryResult" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.003">
    <testcase name="Handler ChaincodeMessageHandler handleGetQueryResult should resolve when _askPeerAndListen resolves" time="0.001" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetQueryResult should reject when _askPeerAndListen rejects" time="0.001" classname="should reject when _askPeerAndListen rejects">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetQueryResult handleGetQueryResult with metadata should resolve when _askPeerAndListen resolves" time="0.001" classname="handleGetQueryResult with metadata should resolve when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleGetHistoryForKey" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler ChaincodeMessageHandler handleGetHistoryForKey should resolve when _askPeerAndListen resolves" time="0" classname="should resolve when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleGetHistoryForKey should reject when _askPeerAndListen resolves" time="0.001" classname="should reject when _askPeerAndListen resolves">
    </testcase>
  </testsuite>
  <testsuite name="handleInvokeChaincode" timestamp="2020-07-02T12:39:46" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.006">
    <testcase name="Handler ChaincodeMessageHandler handleInvokeChaincode should return decoded response when chaincode message type COMPLETED" time="0.002" classname="should return decoded response when chaincode message type COMPLETED">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleInvokeChaincode should throw an error when _askPeerAndListen resolves with an error" time="0.002" classname="should throw an error when _askPeerAndListen resolves with an error">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleInvokeChaincode should reject when _askPeerAndListen resolves" time="0.001" classname="should reject when _askPeerAndListen resolves">
    </testcase>
    <testcase name="Handler ChaincodeMessageHandler handleInvokeChaincode should return nothing chaincode message type not COMPLETED or ERROR" time="0.001" classname="should return nothing chaincode message type not COMPLETED or ERROR">
    </testcase>
  </testsuite>
  <testsuite name="_askPeerAndListen" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.002">
    <testcase name="Handler ChaincodeMessageHandler _askPeerAndListen should return a new promise with value of queueMsg result" time="0.002" classname="should return a new promise with value of queueMsg result">
    </testcase>
  </testsuite>
  <testsuite name="toString" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler ChaincodeMessageHandler toString should return ChaincodeSupportClient object as a string with the URL" time="0" classname="should return ChaincodeSupportClient object as a string with the URL">
    </testcase>
  </testsuite>
  <testsuite name="handleMessage" timestamp="2020-07-02T12:39:46" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
  </testsuite>
  <testsuite name="Error" timestamp="2020-07-02T12:39:46" tests="6" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.006">
    <testcase name="Handler handleMessage Error should handle an error decoding the payload" time="0.001" classname="should handle an error decoding the payload">
    </testcase>
    <testcase name="Handler handleMessage Error should handle error creating a chaincode stub" time="0.001" classname="should handle error creating a chaincode stub">
    </testcase>
    <testcase name="Handler handleMessage Error should handle chaincode.Init returning nothing" time="0.001" classname="should handle chaincode.Init returning nothing">
    </testcase>
    <testcase name="Handler handleMessage Error should handle chaincode.Invoke returning nothing" time="0.001" classname="should handle chaincode.Invoke returning nothing">
    </testcase>
    <testcase name="Handler handleMessage Error should handle chaincode.Init returning no status" time="0.001" classname="should handle chaincode.Init returning no status">
    </testcase>
    <testcase name="Handler handleMessage Error should handle chaincode.Invoke returning no status" time="0.001" classname="should handle chaincode.Invoke returning no status">
    </testcase>
  </testsuite>
  <testsuite name="Complete" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler handleMessage Complete should write a COMPLETE message when successful init" time="0.001" classname="should write a COMPLETE message when successful init">
    </testcase>
    <testcase name="Handler handleMessage Complete should write a COMPLETE message when successful invoke" time="0" classname="should write a COMPLETE message when successful invoke">
    </testcase>
  </testsuite>
  <testsuite name="createStub" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.004">
    <testcase name="Handler createStub should return a new instance of Stub" time="0.004" classname="should return a new instance of Stub">
    </testcase>
  </testsuite>
  <testsuite name="newErrorMsg" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0">
    <testcase name="Handler newErrorMsg should return an object for the error message" time="0" classname="should return an object for the error message">
    </testcase>
  </testsuite>
  <testsuite name="handleGetStateMetadata" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.001">
    <testcase name="Handler handleGetStateMetadata should success" time="0.001" classname="should success">
    </testcase>
  </testsuite>
  <testsuite name="parseResponse" timestamp="2020-07-02T12:39:46" tests="13" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/handler.js" failures="0" time="0.014000000000000002">
    <testcase name="Handler parseResponse should throw an error when type not MSG_TYPE RESPONSE or ERROR" time="0.001" classname="should throw an error when type not MSG_TYPE RESPONSE or ERROR">
    </testcase>
    <testcase name="Handler parseResponse should throw an error when type MSG_TYPE ERROR" time="0.001" classname="should throw an error when type MSG_TYPE ERROR">
    </testcase>
    <testcase name="Handler parseResponse should return the payload when using an unknown method" time="0" classname="should return the payload when using an unknown method">
    </testcase>
    <testcase name="Handler parseResponse should return the payload when using GetState for method" time="0.001" classname="should return the payload when using GetState for method">
    </testcase>
    <testcase name="Handler parseResponse should return the payload when using PutState for method" time="0" classname="should return the payload when using PutState for method">
    </testcase>
    <testcase name="Handler parseResponse should return QueryResponse.decoded payload for QueryStateClose" time="0" classname="should return QueryResponse.decoded payload for QueryStateClose">
    </testcase>
    <testcase name="Handler parseResponse should return QueryResponse.decoded payload for QueryStateNext" time="0" classname="should return QueryResponse.decoded payload for QueryStateNext">
    </testcase>
    <testcase name="Handler parseResponse should return ChaincodeMessage.decoded payload for InvokeChaincode" time="0" classname="should return ChaincodeMessage.decoded payload for InvokeChaincode">
    </testcase>
    <testcase name="Handler parseResponse should return a StateQueryIterator for GetStateByRange" time="0.001" classname="should return a StateQueryIterator for GetStateByRange">
    </testcase>
    <testcase name="Handler parseResponse should decode metadata" time="0.001" classname="should decode metadata">
    </testcase>
    <testcase name="Handler parseResponse should return a StateQueryIterator for GetQueryResult" time="0.001" classname="should return a StateQueryIterator for GetQueryResult">
    </testcase>
    <testcase name="Handler parseResponse should return a HistoryQueryIterator for GetHistoryForKey" time="0.007" classname="should return a HistoryQueryIterator for GetHistoryForKey">
    </testcase>
    <testcase name="Handler parseResponse shold decode state metadata for GetStateMetadata" time="0.001" classname="shold decode state metadata for GetStateMetadata">
    </testcase>
  </testsuite>
  <testsuite name="Iterator" timestamp="2020-07-02T12:39:46" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0">
  </testsuite>
  <testsuite name="CommonIterator" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0.001">
    <testcase name="Iterator CommonIterator should set the variables using the arguments in the constructor" time="0.001" classname="should set the variables using the arguments in the constructor">
    </testcase>
  </testsuite>
  <testsuite name="close" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0">
    <testcase name="Iterator CommonIterator close should return handler.handleQueryStateClose" time="0" classname="should return handler.handleQueryStateClose">
    </testcase>
  </testsuite>
  <testsuite name="_getResultFromBytes" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0">
    <testcase name="Iterator CommonIterator _getResultFromBytes should return KV decode on resultbytes for a QUERY type" time="0" classname="should return KV decode on resultbytes for a QUERY type">
    </testcase>
    <testcase name="Iterator CommonIterator _getResultFromBytes should return KeyModification decode on resultbytes for a HISTORY type" time="0" classname="should return KeyModification decode on resultbytes for a HISTORY type">
    </testcase>
    <testcase name="Iterator CommonIterator _getResultFromBytes should throw an error for unknown types" time="0" classname="should throw an error for unknown types">
    </testcase>
  </testsuite>
  <testsuite name="_createAndEmitResult" timestamp="2020-07-02T12:39:46" tests="6" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0.001">
    <testcase name="Iterator CommonIterator _createAndEmitResult should return value of first element of results converted from bytes and done false when hasMore false and results has no more elements after currentLoc" time="0" classname="should return value of first element of results converted from bytes and done false when hasMore false and results has no more elements after currentLoc">
    </testcase>
    <testcase name="Iterator CommonIterator _createAndEmitResult should return value of first element of results converted from bytes and done false when hasMore true and results has no more elements after currentLoc" time="0" classname="should return value of first element of results converted from bytes and done false when hasMore true and results has no more elements after currentLoc">
    </testcase>
    <testcase name="Iterator CommonIterator _createAndEmitResult should return value of first element of results converted from bytes and done false when hasMore false and results has elements after currentLoc" time="0" classname="should return value of first element of results converted from bytes and done false when hasMore false and results has elements after currentLoc">
    </testcase>
    <testcase name="Iterator CommonIterator _createAndEmitResult should return value of first element of results converted from bytes and done false when hasMore true and results has elements after currentLoc" time="0.001" classname="should return value of first element of results converted from bytes and done false when hasMore true and results has elements after currentLoc">
    </testcase>
    <testcase name="Iterator CommonIterator _createAndEmitResult should return as expected with non-zero currentLoc" time="0" classname="should return as expected with non-zero currentLoc">
    </testcase>
    <testcase name="Iterator CommonIterator _createAndEmitResult should return value of first element of results converted from bytes and done false" time="0" classname="should return value of first element of results converted from bytes and done false">
    </testcase>
  </testsuite>
  <testsuite name="next" timestamp="2020-07-02T12:39:46" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0.008">
    <testcase name="Iterator CommonIterator next should return _createAndEmitResult when there are elements left in the result set" time="0.007" classname="should return _createAndEmitResult when there are elements left in the result set">
    </testcase>
    <testcase name="Iterator CommonIterator next should return _createAndEmitResult when response hasMore and no error occurs" time="0.001" classname="should return _createAndEmitResult when response hasMore and no error occurs">
    </testcase>
    <testcase name="Iterator CommonIterator next should throw an error if error occurs when hasMore and listenerCount for data = 0" time="0" classname="should throw an error if error occurs when hasMore and listenerCount for data = 0">
    </testcase>
    <testcase name="Iterator CommonIterator next should return done if response does not hasMore and listenerCount for end &gt; 0" time="0" classname="should return done if response does not hasMore and listenerCount for end &gt; 0">
    </testcase>
    <testcase name="Iterator CommonIterator next should return done if response does not hasMore and listenerCount for end = 0" time="0" classname="should return done if response does not hasMore and listenerCount for end = 0">
    </testcase>
  </testsuite>
  <testsuite name="StateQueryIterator" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0.001">
    <testcase name="Iterator StateQueryIterator should extend CommonIterator using QUERY for type" time="0.001" classname="should extend CommonIterator using QUERY for type">
    </testcase>
  </testsuite>
  <testsuite name="HistoryQueryIterator" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/iterators.js" failures="0" time="0">
    <testcase name="Iterator HistoryQueryIterator should extend CommonIterator using HISTORY for type" time="0" classname="should extend CommonIterator using HISTORY for type">
    </testcase>
  </testsuite>
  <testsuite name="Logger" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/logger.js" failures="0" time="0">
    <testcase name="Logger coverage" time="0" classname="coverage">
    </testcase>
  </testsuite>
  <testsuite name="getLogger" timestamp="2020-07-02T12:39:46" tests="6" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/logger.js" failures="0" time="0.002">
    <testcase name="Logger getLogger should create a new logger name unknown" time="0.001" classname="should create a new logger name unknown">
    </testcase>
    <testcase name="Logger getLogger should return existing logger if known name used" time="0" classname="should return existing logger if known name used">
    </testcase>
    <testcase name="Logger getLogger should set the log level to fatal when env var set to CRITICAL" time="0.001" classname="should set the log level to fatal when env var set to CRITICAL">
    </testcase>
    <testcase name="Logger getLogger should set the log level to error when env var set to ERROR" time="0" classname="should set the log level to error when env var set to ERROR">
    </testcase>
    <testcase name="Logger getLogger should set the log level to warn when env var set to WARNING" time="0" classname="should set the log level to warn when env var set to WARNING">
    </testcase>
    <testcase name="Logger getLogger should set the log level to debug when env var set to DEBUG" time="0" classname="should set the log level to debug when env var set to DEBUG">
    </testcase>
  </testsuite>
  <testsuite name="setLevel" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/logger.js" failures="0" time="0.001">
    <testcase name="Logger setLevel should update the loggers to be the level passed in" time="0.001" classname="should update the loggers to be the level passed in">
    </testcase>
  </testsuite>
  <testsuite name="formatter" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/logger.js" failures="0" time="0.002">
    <testcase name="Logger formatter anonymous logger" time="0.001" classname="anonymous logger">
    </testcase>
    <testcase name="Logger formatter named logger" time="0.001" classname="named logger">
    </testcase>
  </testsuite>
  <testsuite name="Exports" timestamp="2020-07-02T12:39:46" tests="11" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/module.js" failures="0" time="0">
    <testcase name="Exports should export the start function" time="0" classname="should export the start function">
    </testcase>
    <testcase name="Exports should export the success function" time="0" classname="should export the success function">
    </testcase>
    <testcase name="Exports should export the error function" time="0" classname="should export the error function">
    </testcase>
    <testcase name="Exports should export the Shim class" time="0" classname="should export the Shim class">
    </testcase>
    <testcase name="Exports should export the Stub class" time="0" classname="should export the Stub class">
    </testcase>
    <testcase name="Exports should export the ChaincodeInterface class" time="0" classname="should export the ChaincodeInterface class">
    </testcase>
    <testcase name="Exports should export the ClientIdentity class" time="0" classname="should export the ClientIdentity class">
    </testcase>
    <testcase name="Exports should export the Iterators.HistoryQueryIterator class" time="0" classname="should export the Iterators.HistoryQueryIterator class">
    </testcase>
    <testcase name="Exports should export the HistoryQueryIterator class" time="0" classname="should export the HistoryQueryIterator class">
    </testcase>
    <testcase name="Exports should export the Iterators.StateQueryIterator class" time="0" classname="should export the Iterators.StateQueryIterator class">
    </testcase>
    <testcase name="Exports should export the StateQueryIterator class" time="0" classname="should export the StateQueryIterator class">
    </testcase>
  </testsuite>
  <testsuite name="ChaincodeServer" timestamp="2020-07-02T12:39:46" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/server.js" failures="0" time="0">
  </testsuite>
  <testsuite name="constructor" timestamp="2020-07-02T12:39:46" tests="11" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/server.js" failures="0" time="0.004">
    <testcase name="ChaincodeServer constructor should create a gRPC server instance and call addService in the constructor" time="0.001" classname="should create a gRPC server instance and call addService in the constructor">
    </testcase>
    <testcase name="ChaincodeServer constructor should create a gRPC server instance with TLS credentials and call addService in the constructor" time="0.001" classname="should create a gRPC server instance with TLS credentials and call addService in the constructor">
    </testcase>
    <testcase name="ChaincodeServer constructor should create a gRPC server instance with mutual TLS credentials and call addService in the constructor" time="0" classname="should create a gRPC server instance with mutual TLS credentials and call addService in the constructor">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when chaincode is missing" time="0" classname="should throw an error when chaincode is missing">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when chaincode implements only Invoke" time="0" classname="should throw an error when chaincode implements only Invoke">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when chaincode implements only Init" time="0" classname="should throw an error when chaincode implements only Init">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when serverOpts is missing" time="0" classname="should throw an error when serverOpts is missing">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when serverOpts.ccid is missing" time="0.001" classname="should throw an error when serverOpts.ccid is missing">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when serverOpts.address is missing" time="0.001" classname="should throw an error when serverOpts.address is missing">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when serverOpts.tlsProps.key is missing" time="0" classname="should throw an error when serverOpts.tlsProps.key is missing">
    </testcase>
    <testcase name="ChaincodeServer constructor should throw an error when serverOpts.tlsProps.cert is missing" time="0" classname="should throw an error when serverOpts.tlsProps.cert is missing">
    </testcase>
  </testsuite>
  <testsuite name="start()" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/server.js" failures="0" time="0.002">
    <testcase name="ChaincodeServer start() should call bindAsync and start" time="0.001" classname="should call bindAsync and start">
    </testcase>
    <testcase name="ChaincodeServer start() should throw if bindAsync fails" time="0.001" classname="should throw if bindAsync fails">
    </testcase>
  </testsuite>
  <testsuite name="connect()" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/server.js" failures="0" time="0.004">
    <testcase name="ChaincodeServer connect() should call connect" time="0.002" classname="should call connect">
    </testcase>
    <testcase name="ChaincodeServer connect() should not throw even if chat fails" time="0.002" classname="should not throw even if chat fails">
    </testcase>
  </testsuite>
  <testsuite name="Stub" timestamp="2020-07-02T12:39:46" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
  </testsuite>
  <testsuite name="validateCompositeKeyAttribute" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub validateCompositeKeyAttribute should throw an error if no attribute passed" time="0.001" classname="should throw an error if no attribute passed">
    </testcase>
    <testcase name="Stub validateCompositeKeyAttribute should throw an error if attribute not string" time="0.001" classname="should throw an error if attribute not string">
    </testcase>
    <testcase name="Stub validateCompositeKeyAttribute should throw an error if attribute empty string" time="0" classname="should throw an error if attribute empty string">
    </testcase>
  </testsuite>
  <testsuite name="computeProposalBinding" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub computeProposalBinding should return hash of decodedSP" time="0.001" classname="should return hash of decodedSP">
    </testcase>
  </testsuite>
  <testsuite name="convertToAsyncIterator" timestamp="2020-07-02T12:39:46" tests="8" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.003">
    <testcase name="Stub convertToAsyncIterator should inject a function into the promise that returns an object with the correct methods" time="0.001" classname="should inject a function into the promise that returns an object with the correct methods">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should be possible to iterate using async for of" time="0" classname="should be possible to iterate using async for of">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should close the iterator if we break out of the loop" time="0" classname="should close the iterator if we break out of the loop">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should close the iterator if we break out of the loop straight away" time="0.001" classname="should close the iterator if we break out of the loop straight away">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should close the iterator if we throw out of the loop" time="0" classname="should close the iterator if we throw out of the loop">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should work with a promise that returns an object with an iterator property deconstructed by the caller" time="0.001" classname="should work with a promise that returns an object with an iterator property deconstructed by the caller">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should work with a promise that returns an object with an iterator property not deconstructed by caller" time="0" classname="should work with a promise that returns an object with an iterator property not deconstructed by caller">
    </testcase>
    <testcase name="Stub convertToAsyncIterator should handle a promise rejection" time="0" classname="should handle a promise rejection">
    </testcase>
  </testsuite>
  <testsuite name="ChaincodeStub" timestamp="2020-07-02T12:39:46" tests="10" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.008">
    <testcase name="Stub ChaincodeStub should set up the vars and do nothing more with no signed proposal" time="0" classname="should set up the vars and do nothing more with no signed proposal">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for an invalid proposal" time="0" classname="should throw an error for an invalid proposal">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an empty header" time="0.001" classname="should throw an error for a proposal with an empty header">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an empty payload" time="0" classname="should throw an error for a proposal with an empty payload">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an invalid header" time="0.001" classname="should throw an error for a proposal with an invalid header">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an invalid signature header" time="0.001" classname="should throw an error for a proposal with an invalid signature header">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an invalid creator" time="0.001" classname="should throw an error for a proposal with an invalid creator">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an invalid channelHeader" time="0.001" classname="should throw an error for a proposal with an invalid channelHeader">
    </testcase>
    <testcase name="Stub ChaincodeStub should throw an error for a proposal with an invalid payload" time="0.001" classname="should throw an error for a proposal with an invalid payload">
    </testcase>
    <testcase name="Stub ChaincodeStub should set all the env vars with a valid signed proposal" time="0.002" classname="should set all the env vars with a valid signed proposal">
    </testcase>
  </testsuite>
  <testsuite name="getArgs" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getArgs should return the args" time="0" classname="should return the args">
    </testcase>
  </testsuite>
  <testsuite name="getStringArgs" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getStringArgs should return the args" time="0.001" classname="should return the args">
    </testcase>
  </testsuite>
  <testsuite name="getBufferArgs" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getBufferArgs should return the args" time="0" classname="should return the args">
    </testcase>
  </testsuite>
  <testsuite name="getFunctionAndParameters" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getFunctionAndParameters should return the function name parameters" time="0" classname="should return the function name parameters">
    </testcase>
    <testcase name="Stub ChaincodeStub getFunctionAndParameters should return string for function and empty array as param if only one arg" time="0" classname="should return string for function and empty array as param if only one arg">
    </testcase>
    <testcase name="Stub ChaincodeStub getFunctionAndParameters should return empty string for function and empty array for params if no args" time="0.001" classname="should return empty string for function and empty array for params if no args">
    </testcase>
  </testsuite>
  <testsuite name="getTxID" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getTxID should return txId" time="0" classname="should return txId">
    </testcase>
  </testsuite>
  <testsuite name="getChannelID" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getChannelID should return channel_id" time="0" classname="should return channel_id">
    </testcase>
  </testsuite>
  <testsuite name="getCreator" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getCreator should return creator" time="0" classname="should return creator">
    </testcase>
  </testsuite>
  <testsuite name="getMspID" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getMspID should return MSPID" time="0.001" classname="should return MSPID">
    </testcase>
    <testcase name="Stub ChaincodeStub getMspID should throw Error if MSPID is not available" time="0" classname="should throw Error if MSPID is not available">
    </testcase>
  </testsuite>
  <testsuite name="getTransient" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getTransient should return transient map" time="0" classname="should return transient map">
    </testcase>
  </testsuite>
  <testsuite name="getSignedProposal" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getSignedProposal should return signed proposal" time="0" classname="should return signed proposal">
    </testcase>
  </testsuite>
  <testsuite name="getTxTimestamp" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getTxTimestamp should return transaction timestamp" time="0" classname="should return transaction timestamp">
    </testcase>
  </testsuite>
  <testsuite name="getBinding" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getBinding should return binding" time="0" classname="should return binding">
    </testcase>
  </testsuite>
  <testsuite name="getState" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getState should return handler.handleGetState" time="0.001" classname="should return handler.handleGetState">
    </testcase>
  </testsuite>
  <testsuite name="putState" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub putState should return handler.handlePutState" time="0.001" classname="should return handler.handlePutState">
    </testcase>
    <testcase name="Stub ChaincodeStub putState should return handler.handlePutState" time="0" classname="should return handler.handlePutState">
    </testcase>
  </testsuite>
  <testsuite name="deleteState" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub deleteState should return handler.handleDeleteState" time="0" classname="should return handler.handleDeleteState">
    </testcase>
  </testsuite>
  <testsuite name="setStateValidationParameter" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub setStateValidationParameter should return handler.handlePutStateMetadata" time="0.001" classname="should return handler.handlePutStateMetadata">
    </testcase>
  </testsuite>
  <testsuite name="getStateValidationParameter" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getStateValidationParameter should return handler.handleGetStateMetadata" time="0.001" classname="should return handler.handleGetStateMetadata">
    </testcase>
  </testsuite>
  <testsuite name="getStateByRange" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getStateByRange should return handler.handleGetStateByRange" time="0" classname="should return handler.handleGetStateByRange">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByRange should return handler.handleGetStateByRange using empty key substitute" time="0.001" classname="should return handler.handleGetStateByRange using empty key substitute">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByRange should throw error if using compositekey" time="0" classname="should throw error if using compositekey">
    </testcase>
  </testsuite>
  <testsuite name="getStateByRangeWithPagination" timestamp="2020-07-02T12:39:46" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub getStateByRangeWithPagination should throw error if using compositekey" time="0" classname="should throw error if using compositekey">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByRangeWithPagination should have default startKey eqls EMPTY_KEY_SUBSTITUTE" time="0.001" classname="should have default startKey eqls EMPTY_KEY_SUBSTITUTE">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByRangeWithPagination should have default bookmark eqls an empty string" time="0" classname="should have default bookmark eqls an empty string">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByRangeWithPagination should have default bookmark eqls an empty string" time="0.001" classname="should have default bookmark eqls an empty string">
    </testcase>
  </testsuite>
  <testsuite name="getQueryResult" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getQueryResult should return handler.handleGetQueryResult" time="0" classname="should return handler.handleGetQueryResult">
    </testcase>
  </testsuite>
  <testsuite name="getQueryResultWithPagination" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getQueryResultWithPagination should have default bookmark equals an empty string" time="0" classname="should have default bookmark equals an empty string">
    </testcase>
    <testcase name="Stub ChaincodeStub getQueryResultWithPagination should have default bookmark equals an empty string" time="0.001" classname="should have default bookmark equals an empty string">
    </testcase>
  </testsuite>
  <testsuite name="getHistoryForKey" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getHistoryForKey should return handler.handleGetHistoryForKey" time="0" classname="should return handler.handleGetHistoryForKey">
    </testcase>
  </testsuite>
  <testsuite name="invokeChaincode" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub invokeChaincode should return handler.handleInvokeChaincode" time="0" classname="should return handler.handleInvokeChaincode">
    </testcase>
    <testcase name="Stub ChaincodeStub invokeChaincode should return handler.handleInvokeChaincode handling no channel passed" time="0" classname="should return handler.handleInvokeChaincode handling no channel passed">
    </testcase>
  </testsuite>
  <testsuite name="setEvent" timestamp="2020-07-02T12:39:46" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.005">
    <testcase name="Stub ChaincodeStub setEvent should throw an error when name is not a string" time="0.005" classname="should throw an error when name is not a string">
    </testcase>
    <testcase name="Stub ChaincodeStub setEvent should throw an error when name is empty string" time="0" classname="should throw an error when name is empty string">
    </testcase>
    <testcase name="Stub ChaincodeStub setEvent should set an event" time="0" classname="should set an event">
    </testcase>
  </testsuite>
  <testsuite name="createCompositeKey" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub createCompositeKey should throw an error if attributes is not an array" time="0" classname="should throw an error if attributes is not an array">
    </testcase>
    <testcase name="Stub ChaincodeStub createCompositeKey should return a composite key" time="0" classname="should return a composite key">
    </testcase>
  </testsuite>
  <testsuite name="splitCompositeKey" timestamp="2020-07-02T12:39:46" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub splitCompositeKey should return object with empty values when no composite key" time="0.001" classname="should return object with empty values when no composite key">
    </testcase>
    <testcase name="Stub ChaincodeStub splitCompositeKey should return object with empty values when composite key only has one character" time="0" classname="should return object with empty values when composite key only has one character">
    </testcase>
    <testcase name="Stub ChaincodeStub splitCompositeKey should return object with empty values when composite key does not have first character as COMPOSITEKEY_NS" time="0" classname="should return object with empty values when composite key does not have first character as COMPOSITEKEY_NS">
    </testcase>
    <testcase name="Stub ChaincodeStub splitCompositeKey should return object with objectType set but no attributes" time="0" classname="should return object with objectType set but no attributes">
    </testcase>
    <testcase name="Stub ChaincodeStub splitCompositeKey should return object with objectType set and array of attributes" time="0.001" classname="should return object with objectType set and array of attributes">
    </testcase>
  </testsuite>
  <testsuite name="getStateByPartialCompositeKey" timestamp="2020-07-02T12:39:46" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getStateByPartialCompositeKey should return handler.handleGetStateByRange using composite key" time="0.001" classname="should return handler.handleGetStateByRange using composite key">
    </testcase>
  </testsuite>
  <testsuite name="getStateByPartialCompositeKeyWithPagination" timestamp="2020-07-02T12:39:46" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub getStateByPartialCompositeKeyWithPagination the default bookmark should equal an empty string" time="0.001" classname="the default bookmark should equal an empty string">
    </testcase>
    <testcase name="Stub ChaincodeStub getStateByPartialCompositeKeyWithPagination should return getStateByRangeWithPagination with bookmark and pageSize" time="0.001" classname="should return getStateByRangeWithPagination with bookmark and pageSize">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateData" timestamp="2020-07-02T12:39:46" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub getPrivateData should throw an error if no arguments supplied" time="0.001" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateData should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateData should throw an error if collection null" time="0.001" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateData should return handler.handleGetState" time="0" classname="should return handler.handleGetState">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateDataHash" timestamp="2020-07-02T12:39:46" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub getPrivateDataHash should throw an error if no arguments supplied" time="0" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataHash should throw an error if one argument supplied" time="0.001" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataHash should throw an error if collection null" time="0" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataHash should return handler.handleGetPrivateDataHash" time="0.001" classname="should return handler.handleGetPrivateDataHash">
    </testcase>
  </testsuite>
  <testsuite name="putPrivateData" timestamp="2020-07-02T12:39:47" tests="7" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.009000000000000001">
    <testcase name="Stub ChaincodeStub putPrivateData should throw an error if no arguments supplied" time="0.002" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should throw an error if two arguments supplied" time="0.001" classname="should throw an error if two arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should throw an error if collection null" time="0" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should throw an error if key null" time="0" classname="should throw an error if key null">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should return handler.handlePutState with string" time="0" classname="should return handler.handlePutState with string">
    </testcase>
    <testcase name="Stub ChaincodeStub putPrivateData should return handler.handlePutState with object" time="0.006" classname="should return handler.handlePutState with object">
    </testcase>
  </testsuite>
  <testsuite name="deletePrivateData" timestamp="2020-07-02T12:39:47" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub deletePrivateData should throw an error if no arguments supplied" time="0" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub deletePrivateData should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub deletePrivateData should throw an error if collection null" time="0" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub deletePrivateData should return handler.handleDeleteState" time="0" classname="should return handler.handleDeleteState">
    </testcase>
  </testsuite>
  <testsuite name="setPrivateDataValidationParameter" timestamp="2020-07-02T12:39:47" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub setPrivateDataValidationParameter should return handler.handlePutStateMetadata" time="0.001" classname="should return handler.handlePutStateMetadata">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateDataValidationParameter" timestamp="2020-07-02T12:39:47" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getPrivateDataValidationParameter should return handler.handleGetStateMetadata" time="0" classname="should return handler.handleGetStateMetadata">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateDataByRange" timestamp="2020-07-02T12:39:47" tests="6" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.001">
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should throw an error if no arguments supplied" time="0" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should throw an error if two arguments supplied" time="0" classname="should throw an error if two arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should throw an error if collection null" time="0" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should use a substitute start key if none provided" time="0.001" classname="should use a substitute start key if none provided">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByRange should return handler.handleGetStateByRange" time="0" classname="should return handler.handleGetStateByRange">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateDataByPartialCompositeKey" timestamp="2020-07-02T12:39:47" tests="5" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0.002">
    <testcase name="Stub ChaincodeStub getPrivateDataByPartialCompositeKey should throw an error if no arguments supplied" time="0" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByPartialCompositeKey should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByPartialCompositeKey should throw an error if two arguments supplied" time="0" classname="should throw an error if two arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByPartialCompositeKey should throw an error if collection null" time="0.001" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataByPartialCompositeKey should return stub.getPrivateDataByRange" time="0.001" classname="should return stub.getPrivateDataByRange">
    </testcase>
  </testsuite>
  <testsuite name="getPrivateDataQueryResult" timestamp="2020-07-02T12:39:47" tests="4" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/stub.js" failures="0" time="0">
    <testcase name="Stub ChaincodeStub getPrivateDataQueryResult should throw an error if no arguments supplied" time="0" classname="should throw an error if no arguments supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataQueryResult should throw an error if one argument supplied" time="0" classname="should throw an error if one argument supplied">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataQueryResult should throw an error if collection null" time="0" classname="should throw an error if collection null">
    </testcase>
    <testcase name="Stub ChaincodeStub getPrivateDataQueryResult should return handler.handleGetQueryResult" time="0" classname="should return handler.handleGetQueryResult">
    </testcase>
  </testsuite>
  <testsuite name="KeyEndorsementPolicy" timestamp="2020-07-02T12:39:47" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0">
  </testsuite>
  <testsuite name="#constructor" timestamp="2020-07-02T12:39:47" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0.001">
    <testcase name="KeyEndorsementPolicy #constructor should success for no policy" time="0" classname="should success for no policy">
    </testcase>
    <testcase name="KeyEndorsementPolicy #constructor should decode policy" time="0.001" classname="should decode policy">
    </testcase>
  </testsuite>
  <testsuite name="#addOrgs" timestamp="2020-07-02T12:39:47" tests="6" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0.001">
    <testcase name="KeyEndorsementPolicy #addOrgs should throw error if role is not supported" time="0" classname="should throw error if role is not supported">
    </testcase>
    <testcase name="KeyEndorsementPolicy #addOrgs should throw error if role is missing" time="0" classname="should throw error if role is missing">
    </testcase>
    <testcase name="KeyEndorsementPolicy #addOrgs should success add multiple orgs" time="0.001" classname="should success add multiple orgs">
    </testcase>
    <testcase name="KeyEndorsementPolicy #addOrgs should success add one org" time="0" classname="should success add one org">
    </testcase>
    <testcase name="KeyEndorsementPolicy #addOrgs should success add one peer org" time="0" classname="should success add one peer org">
    </testcase>
    <testcase name="KeyEndorsementPolicy #addOrgs should not throw error if no orgs" time="0" classname="should not throw error if no orgs">
    </testcase>
  </testsuite>
  <testsuite name="#_getPolicyFromMspId" timestamp="2020-07-02T12:39:47" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0">
    <testcase name="KeyEndorsementPolicy #_getPolicyFromMspId should successfully get policy from mspIds" time="0" classname="should successfully get policy from mspIds">
    </testcase>
  </testsuite>
  <testsuite name="#_setMspIdsFromSPE" timestamp="2020-07-02T12:39:47" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0.001">
    <testcase name="KeyEndorsementPolicy #_setMspIdsFromSPE should successfully set mspIds from spe" time="0.001" classname="should successfully set mspIds from spe">
    </testcase>
  </testsuite>
  <testsuite name="#delOrgs" timestamp="2020-07-02T12:39:47" tests="2" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0.001">
    <testcase name="KeyEndorsementPolicy #delOrgs should successfully delete one org" time="0" classname="should successfully delete one org">
    </testcase>
    <testcase name="KeyEndorsementPolicy #delOrgs should successfully delete multiple orgs" time="0.001" classname="should successfully delete multiple orgs">
    </testcase>
  </testsuite>
  <testsuite name="#getPolicy" timestamp="2020-07-02T12:39:47" tests="1" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/statebased.js" failures="0" time="0">
    <testcase name="KeyEndorsementPolicy #getPolicy should successfully get policy" time="0" classname="should successfully get policy">
    </testcase>
  </testsuite>
  <testsuite name="utils" timestamp="2020-07-02T12:39:47" tests="0" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/utils.js" failures="0" time="0">
  </testsuite>
  <testsuite name="generateLoggingPrefix" timestamp="2020-07-02T12:39:47" tests="3" file="/home/vsts/work/1/s/libraries/fabric-shim/test/unit/utils/utils.js" failures="0" time="0">
    <testcase name="utils generateLoggingPrefix should shorten txids over 8 letters" time="0" classname="should shorten txids over 8 letters">
    </testcase>
    <testcase name="utils generateLoggingPrefix should leave txids shorter than 8 as was" time="0" classname="should leave txids shorter than 8 as was">
    </testcase>
    <testcase name="utils generateLoggingPrefix should leave txids exactly 8 letters as was" time="0" classname="should leave txids exactly 8 letters as was">
    </testcase>
  </testsuite>
</testsuites>